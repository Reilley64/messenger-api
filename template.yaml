AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  AWSAccountId:
    Type: String
  CertificateArn:
    Type: String
  DatabaseUsername:
    Type: String
    Default: "messenger"
  DatabasePassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "/Prod/Messenger/Postgres/Password"
    NoEcho: true
  HostedZoneName:
    Type: String
  LogGroupName:
    Type: String
    Default: "/ecs/messenger"
  VpcId:
    Type: String

Resources:
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "database security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: "20"
      DBInstanceClass: "db.t4g.micro"
      Engine: "postgres"
      EngineVersion: "16.3"
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - Name: "email"
          AttributeDataType: "String"
          Required: true
        - Name: "phone_number"
          AttributeDataType: "String"
          Required: true
        - Name: "given_name"
          AttributeDataType: "String"
          Required: true
        - Name: "family_name"
          AttributeDataType: "String"
          Required: true
      UsernameAttributes:
        - "email"

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ExplicitAuthFlows:
        - "ALLOW_REFRESH_TOKEN_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"
      UserPoolId: !Ref UserPool

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "messenger security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - subnet-06c374e938a0becea
        - subnet-03b4f3e0b54e2c277
        - subnet-01de46f2a7341f13f
        - subnet-01eba24bed811ec23
        - subnet-0ba6b62c704444b29
        - subnet-07f08592aaa2f945a
      SecurityGroups:
        - !Ref SecurityGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip

  ALBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Certificates:
        - CertificateArn: !Ref CertificateArn
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Sub "api.${HostedZoneName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID

  UserProfilePicturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - PUT
            AllowedHeaders:
              - "*"
            MaxAge: 3000

  UserProfilePicturesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UserProfilePicturesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${UserProfilePicturesBucket}/*"

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:*
                  - ssm:*
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: "*"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: Messenger
          Image: !Sub "${AWSAccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/messenger/api@sha256:efe9d7cccefde6a4da1f36bf580f60d32d892f73528e0fd02fcb0ef15fe9464b"
          Environment:
            - Name: "RUST_LOG"
              Value: "debug"
            - Name: "SERVER_HOST"
              Value: "0.0.0.0"
            - Name: "SERVER_PORT"
              Value: "80"
            - Name: "DATABASE_URL"
              Value: !Sub "postgresql://${DatabaseUsername}:${DatabasePassword}@${Database.Endpoint.Address}/postgres"
            - Name: "AWS_COGNITO_USER_POOL_ID"
              Value: !Ref UserPool
            - Name: "AWS_S3_USER_PROFILE_PICTURE_BUCKET"
              Value: !Ref UserProfilePicturesBucket
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Secrets:
            - Name: "PUSH_PRIVATE_KEY"
              ValueFrom: "/Prod/Messenger/PushPrivateKey"
      Cpu: "256"
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: "X86_64"
      TaskRoleArn: !Ref ECSTaskRole

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALB
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: "Messenger"
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - subnet-06c374e938a0becea
            - subnet-03b4f3e0b54e2c277
            - subnet-01de46f2a7341f13f
            - subnet-01eba24bed811ec23
            - subnet-0ba6b62c704444b29
            - subnet-07f08592aaa2f945a
          SecurityGroups:
            - !Ref SecurityGroup
          AssignPublicIp: "ENABLED"
      TaskDefinition: !Ref ECSTaskDefinition

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
